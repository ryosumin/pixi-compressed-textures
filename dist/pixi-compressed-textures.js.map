{"version":3,"file":"pixi-compressed-textures.js","sourceRoot":"","sources":["../src/CompressedImage.ts","../src/loaders/AbstractInteranlLoader.ts","../src/loaders/ASTCLoader.ts","../src/loaders/DDSLoader.ts","../src/loaders/PVRTCLoader.ts","../src/loaders/BASISLoader.ts","../src/loaders/CRNLoader.ts","../src/CompressedTextureManager.ts","../src/ImageParser.ts","../src/extensionChooser.ts","../src/extensionFixer.ts","../src/xporter.ts","../src/loaders/WorkedBASISLoader.ts","../src/loaders/_worker/BasisWorker.ts","../src/loaders/_worker/WorkerSource.ts"],"names":[],"mappings":"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","sourcesContent":["\n\ndeclare namespace PIXI {\n    interface GLTexture {\n        compressed?: boolean;\n    }\n}\n\nnamespace pixi_compressed_textures {\n\n    export function loadFromArrayBuffer(arrayBuffer: ArrayBuffer, src: string, crnLoad?: boolean): CompressedImage {\n        return new CompressedImage(src).loadFromArrayBuffer(arrayBuffer, crnLoad);\n    }\n\n    export class CompressedImage extends PIXI.resources.Resource {\n        private _internalLoader: AbstractInternalLoader;\n\n        constructor(src: string, data?: Uint8Array, type?: string, width?: number, height?: number, levels?: number, internalFormat?: number) {\n            super();\n            this.init(src, data, type, width, height, levels, internalFormat)\n        }\n\n        init(src: string, data: Uint8Array, type: string, width: number = -1, height: number = -1, levels: number, internalFormat: number): CompressedImage {\n            this.src = src;\n            (this.resize as any)(width, height);\n            this._width = width;\n            this._height = height;\n            this.data = data;\n            this.type = type;\n            this.levels = levels;\n            this.internalFormat = internalFormat;\n\n            let oldComplete = this.complete;\n            this.complete = !!data;\n            if (!oldComplete && this.complete && this.onload) {\n                this.onload({target: this});\n            }\n            this.update();\n\n            return this;\n        }\n\n        complete = false;\n        isCompressedImage = true;\n        preserveSource = true;\n\n        onload: (event: Object) => void = null;\n\n        src: string;\n        data: Uint8Array;\n        type: string;\n        width: number;\n        height: number;\n        levels: number;\n        internalFormat: number;\n\n        baseTexture: PIXI.BaseTexture = null;\n\n        dispose() {\n            this.data = null;\n        }\n\n        bind(baseTexture: PIXI.BaseTexture) {\n            if (baseTexture.alphaMode !== undefined)\n            {\n                // 5.2.0\n                baseTexture.alphaMode = PIXI.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA;\n            } else\n            {\n                // 5.1.2\n                (baseTexture as any).premultiplyAlpha = false;\n            }\n            super.bind(baseTexture);\n        }\n\n        upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean {\n            const gl = renderer.state.gl;\n\n            glTexture.compressed = false;\n            renderer.texture.initCompressed();\n\n            if (this.data === null) {\n                throw \"Trying to create a second (or more) webgl texture from the same CompressedImage : \" + this.src;\n            }\n\n            const levels = this.levels;\n            \n            let width = this.width;\n            let height = this.height;\n            let offset = 0;\n\n            //TODO: support cubemap resources, target is not TEXTURE_2D for them\n            //TODO: support anisotropic levels\n\n            // Loop through each mip level of compressed texture data provided and upload it to the given texture.\n            for (let i = 0; i < levels; ++i) {\n                \n                // Determine how big this level of compressed texture data is in bytes.\n                const levelSize = this._internalLoader.levelBufferSize(width, height, i);\n                \n                // Get a view of the bytes for this level of DXT data.\n                let dxtLevel = new Uint8Array(this.data.buffer, this.data.byteOffset + offset, levelSize);\n\n                // Upload!\n                gl.compressedTexImage2D(gl.TEXTURE_2D, i, this.internalFormat, width, height, 0, dxtLevel);\n                // The next mip level will be half the height and width of this one.\n                \n                width = width >> 1;\n                if (width < 1) {\n                    width = 1;\n                }\n                \n                height = height >> 1;\n                if (height < 1) {\n                    height = 1;\n                }\n                // Advance the offset into the compressed texture data past the current mip level's data.\n                offset += levelSize;\n            }\n            \n            //clean internal loader data\n            this._internalLoader.free();\n      \n            // Cleaning the data to save memory. NOTE : BECAUSE OF THIS WE CANNOT CREATE TWO GL TEXTURE FROM THE SAME COMPRESSED IMAGE !\n            if (!this.preserveSource)\n                this.data = null;\n\n            return true;\n        }\n\n        style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean {\n            // We can't use gl.generateMipmaps with compressed textures, so only use\n            // mipmapped filtering if the compressed texture data contained mip levels.\n\n            const gl = renderer.state.gl;\n            const levels = this.levels;\n            if (baseTexture.scaleMode === PIXI.SCALE_MODES.LINEAR) {\n                if (levels > 1 && glTexture.mipmap) {\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);\n                } else {\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n                }\n            } else {\n                if (levels > 1 && glTexture.mipmap) {\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_NEAREST);\n                } else {\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                }\n            }\n\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, glTexture.wrapMode);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, glTexture.wrapMode);\n\n            return true;\n        }\n\n        loadFromArrayBuffer(arrayBuffer: ArrayBuffer, crnLoad?: boolean): CompressedImage {\n            const loaders = Loaders;\n            \n            if(!loaders || !loaders.length) {\n                throw \"Registered compressed loaders is missing. Call `TextureSystem.initCompressed` before loading!\";\n            }\n\n            let selectedLoaderCtr = undefined;\n            \n            for(let loader of loaders) {\n                if(!crnLoad) {\n                    if(loader.test(arrayBuffer)) {\n                        selectedLoaderCtr = loader;\n                        break;\n                    }\n                } else {\n                    /// so.... \n                    if(loader.type === \"CRN\"){\n                        selectedLoaderCtr = loader;\n                        break;\n                    }\n                }\n            }\n\n            //todo: implement onload\n            if (selectedLoaderCtr){\n                this._internalLoader = new selectedLoaderCtr(this);\n                return this._internalLoader.load(arrayBuffer);\n            } else {\n                throw new Error(\"Compressed texture format is not recognized: \" + this.src);\n            }\n        }\n    }\n}\n","namespace pixi_compressed_textures {\n    /**\n     * Basic Abstrcat Loader for compressed textures\n     * \n     */\n    export abstract class AbstractInternalLoader {\n        /**\n         * Loader type \n         */\n        public static type: string = \"ABSTRACT\";\n        \n        protected _format: number = 0;\n        \n        constructor(protected _image: CompressedImage = new CompressedImage(\"unknown\")) {\n            //@ts-ignore\n            _image._internalLoader = this;\n        }\n        \n        /**\n         * Calculate buffer size form specific width/height and mip level\n         * \n         * @param width texture width\n         * @param height texture height\n         * @param mipLevel mipLevel\n         */\n        public abstract levelBufferSize(width: number, height: number, mipLevel?: number): number;\n        \n        /**\n         * Load texture from buffer\n         * \n         * @param buffer \n         */\n        public abstract load(buffer: ArrayBuffer): CompressedImage;\n        \n        /**\n         * Free internals buffers\n         * \n         */\n        public free(): void {};\n\n        /**\n         * Test buffer header for supporting to decodings of current loader\n         * \n         * @param arrayBuffer \n         */\n        static test(arrayBuffer: ArrayBuffer) {\n            return false;\n        }\n    }\n}","/// <reference path=\"./AbstractInteranlLoader.ts\"/>\n\n// ASTC Formats, from\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\n// https://arm-software.github.io/opengl-es-sdk-for-android/astc_textures.html\n\n/** HEADER\n * struct astcheader\n    {\n        uint8_t magic [ 4 ] ;\n        uint8_t blockdim_x ;\n        uint8_t blockdim_y ;\n        uint8_t blockdim_z ;\n        uint8_t x_size [ 3 ] ;\n        uint8_t y_size [ 3 ] ;\n        uint8_t z_size [ 3 ] ;\n    } ;\n */\n\nnamespace pixi_compressed_textures {\n\n    // headers\n    const ASTC_HEADER_LENGTH = 16;\n    // uint 8\n    const ASTC_HEADER_DIM_X = 4;\n    // uint 8\n    const ASTC_HEADER_DIM_Y = 5;\n    // uint 24\n    const ASTC_HEADER_WIDTH = 7;\n    //uint 24\n    const ASTC_HEADER_HEIGHT = 10;\n\n    const ASTC_MAGIC = 0x5CA1AB13;\n\n    /* Compressed Texture Format */\n    const COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0;\n    const COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1;\n    const COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2;\n    const COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3;\n    const COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4;\n    const COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5;\n    const COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6;\n    const COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7;\n    const COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8;\n    const COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9;\n    const COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA;\n    const COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB;\n    const COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC;\n    const COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD;\n\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0;\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1;\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2;\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3;\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4;\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5;\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6;\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7;\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8;\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9;\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA;\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB;\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC;\n    const COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD;\n\n    const ASTC_DIMS_TO_FORMAT = {\n        [4 * 4]: 0,\n        [5 * 4]: 1,\n        [5 * 5]: 2,\n        [6 * 5]: 3,\n        [6 * 6]: 4,\n        [8 * 5]: 5,\n        [8 * 6]: 6,\n        [8 * 8]: 7,\n        [10 * 5]: 8,\n        [10 * 6]: 9,\n        [10 * 8]: 10,\n        [10 * 10]: 11,\n        [12 * 10]: 12,\n        [12 * 12]: 13\n    }\n    \n    export class ASTCLoader extends AbstractInternalLoader {\n        public static type = \"ASTC\";\n        private _blockSize: { x: number; y: number } = { x: 0, y: 0 };\n\n        constructor(_image: CompressedImage, public useSRGB = false) {\n            super(_image);\n        }\n\n        load(buffer: ArrayBuffer) {\n            if (!ASTCLoader.test(buffer)) {\n                // Do some sanity checks to make sure this is a valid ASTC file.\n                throw \"Invalid magic number in ASTC header\";\n            }\n\n            const header = new Uint8Array(buffer, 0, ASTC_HEADER_LENGTH);\n            const dim_x = header[ASTC_HEADER_DIM_X];\n            const dim_y = header[ASTC_HEADER_DIM_Y];\n            const width = (header[ASTC_HEADER_WIDTH]) + (header[ASTC_HEADER_WIDTH + 1] << 8) + (header[ASTC_HEADER_WIDTH + 2] << 16);\n            const height = (header[ASTC_HEADER_HEIGHT]) + (header[ASTC_HEADER_HEIGHT + 1] << 8) + (header[ASTC_HEADER_HEIGHT + 2] << 16);\n            const internalFormat = ASTC_DIMS_TO_FORMAT[dim_x * dim_y] + (this.useSRGB ? COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : COMPRESSED_RGBA_ASTC_4x4_KHR);\n            const astcData = new Uint8Array(buffer, ASTC_HEADER_LENGTH);\n\n            this._format = internalFormat;\n            this._blockSize.x = dim_x;\n            this._blockSize.y = dim_y;\n\n            const dest = this._image;\n            dest.init(dest.src, astcData, 'ASTC', width, height, 1, internalFormat);\n            return dest;\n        }\n\n        static test(buffer: ArrayBuffer) {\n            const magic = new Int32Array(buffer, 0, 1);\n            return magic[0] === ASTC_MAGIC;\n        }\n\n        levelBufferSize(width: number, height: number, mipLevel: number = 0): number {\n            const f_ = Math.floor;\n            const dim_x = this._blockSize.x;\n            const dim_y = this._blockSize.y;\n\n            return (f_((width + dim_x - 1) / dim_x) * f_((height + dim_y - 1) / dim_y)) << 4;\n        }\n    }\n}\n","/// <reference path=\"./AbstractInteranlLoader.ts\"/>\n\n\n// Utility functions\n// Builds a numeric code for a given fourCC string\nfunction fourCCToInt32(value: string) {\n    return value.charCodeAt(0) +\n        (value.charCodeAt(1) << 8) +\n        (value.charCodeAt(2) << 16) +\n        (value.charCodeAt(3) << 24);\n}\n\n// Turns a fourCC numeric code into a string\nfunction int32ToFourCC(value: number) {\n    return String.fromCharCode(\n        value & 0xff,\n        (value >> 8) & 0xff,\n        (value >> 16) & 0xff,\n        (value >> 24) & 0xff\n    );\n}\n\nnamespace pixi_compressed_textures {\n    // DXT values and structures referenced from:\n    // http://msdn.microsoft.com/en-us/library/bb943991.aspx/\n    const DDS_MAGIC = 0x20534444;\n    const DDSD_MIPMAPCOUNT = 0x20000;\n    const DDPF_FOURCC = 0x4;\n    const DDS_HEADER_LENGTH = 31; // The header length in 32 bit ints.\n\n    // Offsets into the header array.\n    const DDS_HEADER_MAGIC = 0;\n    const DDS_HEADER_SIZE = 1;\n    const DDS_HEADER_FLAGS = 2;\n    const DDS_HEADER_HEIGHT = 3;\n    const DDS_HEADER_WIDTH = 4;\n    const DDS_HEADER_MIPMAPCOUNT = 7;\n    const DDS_HEADER_PF_FLAGS = 20;\n    const DDS_HEADER_PF_FOURCC = 21;\n\n    // FourCC format identifiers.\n    const FOURCC_DXT1 = fourCCToInt32(\"DXT1\");\n    const FOURCC_DXT3 = fourCCToInt32(\"DXT3\");\n    const FOURCC_DXT5 = fourCCToInt32(\"DXT5\");\n\n    const FOURCC_ATC = fourCCToInt32(\"ATC \");\n    const FOURCC_ATCA = fourCCToInt32(\"ATCA\");\n    const FOURCC_ATCI = fourCCToInt32(\"ATCI\");\n\n    // DXT formats, from:\n    // http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\n    const COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\n    const COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;\n    const COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\n    const COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\n\n    // ATC formats, from:\n    // http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_atc/\n    const COMPRESSED_RGB_ATC_WEBGL = 0x8C92;\n    const COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C93;\n    const COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE;\n\n    const FOURCC_TO_FORMAT = {\n        [FOURCC_DXT1]: COMPRESSED_RGB_S3TC_DXT1_EXT,\n        [FOURCC_DXT3]: COMPRESSED_RGBA_S3TC_DXT3_EXT,\n        [FOURCC_DXT5]: COMPRESSED_RGBA_S3TC_DXT5_EXT,\n        [FOURCC_ATC]: COMPRESSED_RGB_ATC_WEBGL,\n        [FOURCC_ATCA]: COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL,\n        [FOURCC_ATCI]: COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL\n    }\n\n    export class DDSLoader extends AbstractInternalLoader {\n        public static type = \"DDS\";\n        constructor(_image: CompressedImage) {\n            super(_image);\n        }\n\n        load(arrayBuffer: ArrayBuffer) {\n            if (!DDSLoader.test(arrayBuffer)) {\n                // Do some sanity checks to make sure this is a valid ASTC file.\n                throw \"Invalid magic number in DDS header\";\n            }\n\n            // Get a view of the arrayBuffer that represents the DDS header.\n            const header = new Int32Array(arrayBuffer, 0, DDS_HEADER_LENGTH);\n\n            if (!(header[DDS_HEADER_PF_FLAGS] & DDPF_FOURCC))\n                throw \"Unsupported format, must contain a FourCC code\";\n\n            // Determine what type of compressed data the file contains.\n            const fourCC = header[DDS_HEADER_PF_FOURCC];\n            let internalFormat = FOURCC_TO_FORMAT[fourCC] || -1;\n\n            if (internalFormat < 0) {\n                throw \"Unsupported FourCC code: \" + int32ToFourCC(fourCC);\n            }\n\n            // Determine how many mipmap levels the file contains.\n            let levels = 1;\n            if (header[DDS_HEADER_FLAGS] & DDSD_MIPMAPCOUNT) {\n                levels = Math.max(1, header[DDS_HEADER_MIPMAPCOUNT]);\n            }\n\n            // Gather other basic metrics and a view of the raw the DXT data.\n            const width = header[DDS_HEADER_WIDTH];\n            const height = header[DDS_HEADER_HEIGHT];\n            const dataOffset = header[DDS_HEADER_SIZE] + 4;\n            const dxtData = new Uint8Array(arrayBuffer, dataOffset);\n            const dest = this._image;\n\n            this._format = internalFormat;\n            dest.init(dest.src, dxtData, 'DDS', width, height, levels, internalFormat);\n\n            return dest;\n        }\n\n        static test(buffer: ArrayBuffer) {\n            const magic = new Int32Array(buffer, 0, 1);\n            return magic[0] === DDS_MAGIC;\n        }\n\n        levelBufferSize(width: number, height: number, mipLevel: number = 0): number {\n            switch (this._format) {\n                case COMPRESSED_RGB_S3TC_DXT1_EXT:\n                case COMPRESSED_RGB_ATC_WEBGL:\n                    return ((width + 3) >> 2) * ((height + 3) >> 2) * 8;\n\n                case COMPRESSED_RGBA_S3TC_DXT3_EXT:\n                case COMPRESSED_RGBA_S3TC_DXT5_EXT:\n                case COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL:\n                case COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL:\n                    return ((width + 3) >> 2) * ((height + 3) >> 2) * 16;\n\n                default:\n                    return 0;\n            }\n        }\n    }\n}\n","/// <reference path=\"./AbstractInteranlLoader.ts\"/>\n\nnamespace pixi_compressed_textures {\n    //===============//\n    // PVR constants //\n    //===============//\n\n    // PVR formats, from:\n    // http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_pvrtc/\n    const COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;\n    const COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;\n    const COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;\n    const COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;\n\n    // ETC1 format, from:\n    // http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_etc1/\n    const COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;\n\n    const PVR_FORMAT_2BPP_RGB = 0;\n    const PVR_FORMAT_2BPP_RGBA = 1;\n    const PVR_FORMAT_4BPP_RGB = 2;\n    const PVR_FORMAT_4BPP_RGBA = 3;\n    const PVR_FORMAT_ETC1 = 6;\n    const PVR_FORMAT_DXT1 = 7;\n    const PVR_FORMAT_DXT3 = 9;\n    const PVR_FORMAT_DXT5 = 5;\n\n    const PVR_HEADER_LENGTH = 13; // The header length in 32 bit ints.\n    const PVR_MAGIC = 0x03525650; //0x50565203;\n\n    // Offsets into the header array.\n    const PVR_HEADER_MAGIC = 0;\n    const PVR_HEADER_FORMAT = 2;\n    const PVR_HEADER_HEIGHT = 6;\n    const PVR_HEADER_WIDTH = 7;\n    const PVR_HEADER_MIPMAPCOUNT = 11;\n    const PVR_HEADER_METADATA = 12;\n\n    // DXT formats, from:\n    // http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\n    const COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\n    const COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;\n    const COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\n    const COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\n\n    const PVR_TO_FORMAT = {\n        [PVR_FORMAT_2BPP_RGB] : COMPRESSED_RGB_PVRTC_2BPPV1_IMG,\n        [PVR_FORMAT_2BPP_RGBA] : COMPRESSED_RGBA_PVRTC_2BPPV1_IMG,\n        [PVR_FORMAT_4BPP_RGB] : COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\n        [PVR_FORMAT_4BPP_RGBA] : COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\n        [PVR_FORMAT_ETC1] : COMPRESSED_RGB_ETC1_WEBGL,\n        [PVR_FORMAT_DXT1] : COMPRESSED_RGB_S3TC_DXT1_EXT,\n        [PVR_FORMAT_DXT3] : COMPRESSED_RGBA_S3TC_DXT3_EXT,\n        [PVR_FORMAT_DXT5] : COMPRESSED_RGBA_S3TC_DXT5_EXT\n    } as {[key: number] : number};\n\n    export class PVRTCLoader extends AbstractInternalLoader {        \n        public static type = \"PVR\";\n\n        constructor(_image : CompressedImage) {\n            super(_image);\n        }\n\n        load(arrayBuffer: ArrayBuffer) {\n            if (!PVRTCLoader.test(arrayBuffer)) {\n                // Do some sanity checks to make sure this is a valid ASTC file.\n                throw \"Invalid magic number in PVR header\";\n            }\n\n            // Get a view of the arrayBuffer that represents the DDS header.\n            const header = new Int32Array(arrayBuffer, 0, PVR_HEADER_LENGTH);\n\n            // Determine what type of compressed data the file contains.\n            const format = header[PVR_HEADER_FORMAT];\n            const internalFormat = PVR_TO_FORMAT[format] || -1;\n\n            // Gather other basic metrics and a view of the raw the DXT data.\n            const width = header[PVR_HEADER_WIDTH];\n            const height = header[PVR_HEADER_HEIGHT];\n            const levels = header[PVR_HEADER_MIPMAPCOUNT];\n            const dataOffset = header[PVR_HEADER_METADATA] + 52;\n            const pvrtcData = new Uint8Array(arrayBuffer, dataOffset);\n\n            const dest = this._image;\n            \n            this._format = internalFormat;\n            dest.init(dest.src, pvrtcData, 'PVR', width, height, levels, internalFormat);\n\n            return dest;\n        }\n\n        static test(buffer: ArrayBuffer) {\n            const magic = new Int32Array(buffer, 0, 1);\n            return magic[0] === PVR_MAGIC;\n        }\n\n        levelBufferSize(width : number, height : number, mipLevel: number = 0): number {            \n            switch (this._format) {\n                case COMPRESSED_RGB_S3TC_DXT1_EXT:\n                case COMPRESSED_RGB_ETC1_WEBGL:\n                    return ((width + 3) >> 2) * ((height + 3) >> 2) * 8;\n    \n                case COMPRESSED_RGBA_S3TC_DXT3_EXT:\n                case COMPRESSED_RGBA_S3TC_DXT5_EXT:\n                    return ((width + 3) >> 2) * ((height + 3) >> 2) * 16;\n    \n                case COMPRESSED_RGB_PVRTC_4BPPV1_IMG:\n                case COMPRESSED_RGBA_PVRTC_4BPPV1_IMG:\n                    return Math.floor((Math.max(width, 8) * Math.max(height, 8) * 4 + 7) / 8);\n    \n                case COMPRESSED_RGB_PVRTC_2BPPV1_IMG:\n                case COMPRESSED_RGBA_PVRTC_2BPPV1_IMG:\n                    return Math.floor((Math.max(width, 16) * Math.max(height, 8) * 2 + 7) / 8);\n    \n                default:\n                    return 0;\n            }\n        }\n    }\n}\n","/// <reference path=\"./AbstractInteranlLoader.ts\"/>\n\n/**\n * @file BASISLoader - Basis implementation for PIXI\n * @see https://github.com/BinomialLLC/basis_universal\n *\n * @author Timoshenko Konstantin\n * @see https://github.com/exponenta\n */\n\ndeclare class BasisFile {\n    constructor(buffer : Uint8Array);\n    getNumImages(): number;\n    getNumLevels(): number;\n    getImageWidth(imageId: number, level:number): number;\n    getImageHeight(imageId: number, level:number): number;\n    getHasAlpha(): boolean;\n    startTranscoding(): boolean;\n    close(): number;\n    delete(): number;\n    getImageTranscodedSizeInBytes(imageId : number, level: number, basisFormat: number): number;\n    transcodeImage(dstBuff: Uint8Array, imageId: number, level: number, basisFormat: number, pvrtcWrapAddressing: boolean, getAlphaForOpaqueFormats: boolean): number\n}\n\nnamespace pixi_compressed_textures {\n\n    const BASIS_FORMAT = {\n        cTFETC1: 0, // not support alpha\n        cTFETC2: 1, // not WebGL\n        cTFBC1: 2, // not support alpha\n        cTFBC3: 3,\n        // cTFBC4: 4, // not WebGL\n        // cTFBC5: 5, // not WebGL\n        // cTFBC7_M6_OPAQUE_ONLY: 6 // not WebGL\n        // cTFBC7_M5 : 7 // not WebGL\n        cTFPVRTC1_4_RGB: 8, // not support alpha\n        cTFPVRTC1_4_RGBA: 9,\n        cTFASTC_4x4: 10, // mobile alpha! Ehooo\n        // cTFATC_RGB : 11 //  not WebGL\n        // cTFATC_RGBA_INTERPOLATED_ALPHA : 12  not WebGL\n\n        cTFRGBA32: 11 // why not?\n    };\n\n    const BASIS_HAS_ALPHA = {\n        [3]: true, [9]: true, [10]: true, [11]: true\n    } as {[key: number]: boolean}\n\n    const NON_COMPRESSED = -1;\n    const COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;\n    const COMPRESSED_RGBA8_ETC2_EAC = 0x9278;\n    const COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\n    const COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;\n    const COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\n    const COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\n    const COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;\n    const COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;\n    const COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0;\n\n    const BASIS_TO_FMT = {\n        // fallback\n        [BASIS_FORMAT.cTFRGBA32]: NON_COMPRESSED,\n        [BASIS_FORMAT.cTFETC1]: COMPRESSED_RGB_ETC1_WEBGL,\n        [BASIS_FORMAT.cTFETC2]: COMPRESSED_RGBA8_ETC2_EAC,\n        [BASIS_FORMAT.cTFBC1]: COMPRESSED_RGB_S3TC_DXT1_EXT,\n        [BASIS_FORMAT.cTFBC3]: COMPRESSED_RGBA_S3TC_DXT5_EXT,\n        [BASIS_FORMAT.cTFPVRTC1_4_RGB]: COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\n        [BASIS_FORMAT.cTFPVRTC1_4_RGBA]: COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\n        [BASIS_FORMAT.cTFASTC_4x4]: COMPRESSED_RGBA_ASTC_4x4_KHR\n    }\n\n    const FMT_TO_BASIS = Object.keys(BASIS_TO_FMT).reduce((acc : any, next : string) => {\n        acc[BASIS_TO_FMT[+next]] = +next;\n        return acc;\n    }, {} as {[key: number]: number});\n\n    export class BASISLoader extends AbstractInternalLoader {\n        static BASIS_BINDING: typeof BasisFile = undefined;\n        static RGB_FORMAT: {basis: number, name: string, native: number};\n        static RGBA_FORMAT: {basis: number, name: string, native: number};\n\n        type = \"BASIS\";\n\n        // private _file : BasisFile = undefined;\n        private _levelBufferSize:number;\n\n        constructor(_image : CompressedImage) {\n            super(_image);\n        }\n\n        static test(array: ArrayBuffer) {\n            const header = new Uint32Array(array, 0, 1)[0];\n            const decoder = !!BASISLoader.BASIS_BINDING;\n            const isValid = header === 0x134273 && decoder;\n            const isSupported = BASISLoader.RGB_FORMAT && BASISLoader.RGBA_FORMAT;\n\n            if (!isValid && isSupported) {\n                console.warn(\"[BASIS LOADER] Is Supported, but transcoder not binded or file is not BASIS file!\");\n            }\n\n            return (isSupported && isValid);\n        }\n\n        /**\n         * Binding BASIS Transcoder to loader\n         *\n         * @param fileCtr BASIS File contreuctor\n         * @param ext supported extension, grub it from `app.renderer.plugins.texture.compressedExtensions`\n         */\n        static bindTranscoder(fileCtr: typeof BasisFile, ext: any) {\n            if(!fileCtr || !ext) {\n                throw \"Invalid state! undef fileCtr or ext invalid!\"\n            };\n\n            // fetch list of ALL extensions\n            const plain = Object.keys(ext)\n                .reduce((acc, key) => {\n                    const val = ext [key];\n                    if (!val) {\n                        return acc;\n                    };\n                    return Object.assign(acc, val.__proto__);\n                }, {});\n\n            let latestOp = undefined;\n            let lastestAlpha = undefined;\n\n            // SELECT SUPPORT\n            for (let v in plain) {\n                const native = plain[v];\n                if (FMT_TO_BASIS[native] !== undefined) {\n                    let basis = FMT_TO_BASIS[native] as number;\n                    if (BASIS_HAS_ALPHA[basis]) {\n                        lastestAlpha = {\n                            native, name: v, basis\n                        }\n                    } else {\n                        latestOp = {\n                            native, name: v, basis\n                        }\n                    }\n                }\n            }\n\n            BASISLoader.RGB_FORMAT = latestOp || lastestAlpha;\n            BASISLoader.RGBA_FORMAT = lastestAlpha || latestOp;\n            BASISLoader.BASIS_BINDING = fileCtr;\n\n            console.log(\n                    `[BASISLoader] Supported formats:`,\n                    `\\nRGB:${BASISLoader.RGB_FORMAT.name}\\nRGBA:${BASISLoader.RGBA_FORMAT.name}`\n            );\n\n            //Register self after bunding\n            RegisterCompressedLoader(BASISLoader);\n            RegisterCompressedExtensions('basis');\n        }\n\n        load(buffer : ArrayBuffer) {\n            if(!BASISLoader.test(buffer)) {\n                throw \"BASIS Transcoder not binded or transcoding not supported =(!\";\n            }\n\n            this._loadAsync(buffer);\n            return this._image;\n        }\n\n        _loadAsync(buffer : ArrayBuffer) {\n            const startTime = performance.now();\n            const BasisFileCtr = BASISLoader.BASIS_BINDING as any;\n            const basisFile = new BasisFileCtr(new Uint8Array(buffer)) as BasisFile;\n            const width = basisFile.getImageWidth(0, 0);\n            const height = basisFile.getImageHeight(0, 0);\n            // const images = await basisFile.getNumImages(); // not support yet\n            const levels = 1;//await basisFile.getNumLevels( 0 ); // not support yet\n            const hasAlpha = basisFile.getHasAlpha();\n            const dest = this._image;\n\n            if (!basisFile.startTranscoding()) {\n                throw \"Transcoding error!\";\n            }\n\n            const target = hasAlpha ? BASISLoader.RGBA_FORMAT : BASISLoader.RGB_FORMAT;\n\n            console.log(\"Grats! BASIS will be transcoded to:\", target);\n\n            const dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, 0, target.basis));\n\n            if (!basisFile.transcodeImage(dst, 0, 0, target.basis, !!0, !!0)) {\n                throw \"Transcoding error!\";\n            }\n\n            console.log(\"[BASISLoader] Totla transcoding time:\", performance.now() - startTime);\n\n            this._format = target.native;\n            // this._file = basisFile;\n            this._levelBufferSize = this._computeLevelBufferSize(basisFile, width, height, 0);\n\n            let name = target.name.replace(\"COMPRESSED_\", \"\");\n\n            basisFile.close();\n            basisFile.delete();\n            return Promise.resolve(dest.init(dest.src, dst, 'BASIS|' + name, width, height, levels, target.native));\n        }\n\n        _computeLevelBufferSize(_file:BasisFile, width : number, height: number, level: number): number {\n            return _file.getImageTranscodedSizeInBytes(0, level, FMT_TO_BASIS[this._format]);\n        }\n\n        levelBufferSize(width : number, height: number, level: number): number {\n            return this._levelBufferSize;\n        }\n    }\n}\n","/// <reference path=\"./AbstractInteranlLoader.ts\"/>\n\ndeclare module CRN_Module {\n    export function _free(src: number): void\n\n    export let HEAPU8: Uint8Array;\n\n    export function _crn_get_width(src: number, size: number): number;\n\n    export function _crn_get_height(src: number, size: number): number;\n\n    export function _crn_get_levels(src: number, size: number): number;\n\n    export function _crn_get_dxt_format(src: number, size: number): number;\n\n    export function _crn_get_uncompressed_size(src: number, size: number, stuff: number): number;\n\n    export function _malloc(size: number): number;\n\n    export function _crn_decompress(src: number, srcSize: number, dst: number, dstSize: number, stuff: number): void;\n}\n\nnamespace pixi_compressed_textures {\n    \n    const CRN_Module = (window as any).CRN_Module;\n\n    function arrayBufferCopy(src: Uint8Array, dst: Uint8Array, dstByteOffset: number, numBytes: number): void {\n        const dst32Offset = dstByteOffset / 4;\n        const tail = (numBytes % 4);\n        const src32 = new Uint32Array(src.buffer, 0, (numBytes - tail) / 4);\n        const dst32 = new Uint32Array(dst.buffer);\n        for (let ii = 0; ii < src32.length; ii++) {\n            dst32[dst32Offset + ii] = src32[ii];\n        }\n        for (let i = numBytes - tail; i < numBytes; i++) {\n            dst[dstByteOffset + i] = src[i];\n        }\n    }\n\n    \n    // DXT formats, from:\n    // http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\n    const COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\n    const COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\n    const COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\n\n    // Taken from crnlib.h\n    const DXT_FORMAT_MAP = [\n        COMPRESSED_RGB_S3TC_DXT1_EXT, \t// 0\n        COMPRESSED_RGBA_S3TC_DXT3_EXT,  // 1\n        COMPRESSED_RGBA_S3TC_DXT5_EXT \t// 2\n    ];\n\n    export class CRNLoader extends AbstractInternalLoader {\n        public static type = \"CRN\";\n        private _caches : number [];\n        constructor(_image: CompressedImage) {\n            super(_image);\n        }\n\n        load(arrayBuffer: ArrayBuffer) {\n\n            const srcSize = arrayBuffer.byteLength;\n            const bytes = new Uint8Array(arrayBuffer);\n            const src = CRN_Module._malloc(srcSize);\n\n            arrayBufferCopy(bytes, CRN_Module.HEAPU8, src, srcSize);\n\n            const width = CRN_Module._crn_get_width(src, srcSize);\n            const height = CRN_Module._crn_get_height(src, srcSize);\n            const levels = CRN_Module._crn_get_levels(src, srcSize);\n            const format = CRN_Module._crn_get_dxt_format(src, srcSize);\n            const dstSize = CRN_Module._crn_get_uncompressed_size(src, srcSize, 0);\n            const dst = CRN_Module._malloc(dstSize);\n\n            CRN_Module._crn_decompress(src, srcSize, dst, dstSize, 0);\n\n            const dxtData = new Uint8Array(CRN_Module.HEAPU8.buffer, dst, dstSize);\n            const internalFormat = DXT_FORMAT_MAP[format];\n            const dest = this._image;\n\n            this._format = internalFormat;\n            this._caches = [src, dst];\n\n            return dest.init(dest.src, dxtData, 'CRN', width, height, levels, internalFormat);\n        }\n\n        levelBufferSize(width: number, height: number, mipLevel: number = 0): number {\n            // same as in DDS\n            return DDSLoader.prototype.levelBufferSize.call(this, width, height, mipLevel);\n        }\n\n        free() {\n            CRN_Module._free(this._caches[0]);\n            CRN_Module._free(this._caches[1]);\n            \n        }\n\n        static test(buffer: ArrayBuffer) {\n            return !!CRN_Module;\n        }\n    }\n}\n","/// <reference path=\"./loaders/ASTCLoader.ts\"/>\n/// <reference path=\"./loaders/DDSLoader.ts\"/>\n/// <reference path=\"./loaders/PVRTCLoader.ts\"/>\n/// <reference path=\"./loaders/BASISLoader.ts\"/>\n/// <reference path=\"./loaders/CRNLoader.ts\"/>\n\ndeclare namespace PIXI.systems {\n\tinterface TextureSystem {\n\t\tinitCompressed?(): void;\n\n\t\tregisterCompressedLoader?(loader: any): void;\n\n\t\tcompressedExtensions?: any;\n\t}\n}\n\nnamespace pixi_compressed_textures {\n\n\texport let Loaders: Array<any> = [\n\t\tDDSLoader,\n\t\tPVRTCLoader,\n\t\tASTCLoader,\n\t\tCRNLoader\n\t];\n\n\tPIXI.systems.TextureSystem.prototype.initCompressed = function () {\n\t\tconst gl = this.gl;\n\t\tif (!this.compressedExtensions) {\n\t\t\tthis.compressedExtensions = {\n\t\t\t\tdxt: gl.getExtension(\"WEBGL_compressed_texture_s3tc\"),\n\t\t\t\tpvrtc: (gl.getExtension(\"WEBGL_compressed_texture_pvrtc\") || gl.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")), // 09-21-2019 -- IOS require it\n\t\t\t\tastc: gl.getExtension(\"WEBGL_compressed_texture_astc\"),\n\t\t\t\tatc: gl.getExtension(\"WEBGL_compressed_texture_atc\"),\n\t\t\t\tetc1: gl.getExtension(\"WEBGL_compressed_texture_etc1\"),\n\t\t\t\tetc2: gl.getExtension('WEBGL_compressed_texture_etc')\n\t\t\t};\n\t\t\tthis.compressedExtensions.crn = this.compressedExtensions.dxt;\n\t\t}\n\t};\n\n\texport function RegisterCompressedLoader(...loaders: any[]): void {\n\t\tLoaders = Loaders || [];\n\t\tfor (let e in loaders) {\n\t\t\tif (Loaders.indexOf(loaders[e]) < 0) {\n\t\t\t\tLoaders.push(loaders[e])\n\t\t\t}\n\t\t}\n\t}\n\n\texport let defaultDetectedExtensions = ['.png', '.jpg', '.json', '.atlas'];\n\n\texport function detectExtensions(renderer: PIXI.Renderer, resolution?: number, defaultResolution: number = 1) {\n\t\tlet extensions = [];\n\t\tif (renderer instanceof PIXI.Renderer) {\n\t\t\trenderer.texture.initCompressed();\n\t\t\tlet data = renderer.texture.compressedExtensions;\n\t\t\tif (data.dxt) extensions.push('.dds');\n\t\t\tif (data.pvrtc) extensions.push('.pvr');\n\t\t\tif (data.atc) extensions.push('.atc');\n\t\t\tif (data.astc) extensions.push('.astc');\n\t\t\tif (data.etc1) extensions.push('.etc1');\n\t\t}\n\t\t//retina or not\n\t\tlet ext = extensions.slice(0);\n\n\t\tlet resolutions = [resolution || renderer.resolution];\n\t\tif (defaultResolution) {\n\t\t\tresolutions.push(defaultResolution);\n\t\t}\n\n\t\tfor (let i = 0; i < resolutions.length; i++) {\n\t\t\tlet res = \"@\" + resolutions[i] + \"x\";\n\t\t\tfor (let j = 0; j < ext.length; j++) {\n\t\t\t\textensions.push(res + ext[j]);\n\t\t\t}\n\t\t\tfor (let j = 0; j < defaultDetectedExtensions.length; j++) {\n\t\t\t\textensions.push(res + defaultDetectedExtensions[j]);\n\t\t\t}\n\t\t}\n\t\treturn extensions;\n\t}\n}\n","declare namespace PIXI {\n    interface LoaderResource {\n        compressedImage?: pixi_compressed_textures.CompressedImage;\n        isCompressedImage?: boolean;\n    }\n}\n\nnamespace pixi_compressed_textures {\n    import Resource = PIXI.LoaderResource;\n\n    export const TEXTURE_EXTENSIONS :  string[] = [];\n\n    export function RegisterCompressedExtensions(...exts: string[]) {\n        for(let e in exts) {\n            if(TEXTURE_EXTENSIONS.indexOf(exts[e]) < 0) {\n                TEXTURE_EXTENSIONS.push(exts[e]);\n                Resource.setExtensionXhrType(exts[e], Resource.XHR_RESPONSE_TYPE.BUFFER);\n            }\n        }        \n    }\n\n    export class ImageParser {\n        static use(this: PIXI.Loader, resource: PIXI.LoaderResource, next: () => any) {\n\n            const url = resource.url;\n            const idx = url.lastIndexOf('.');\n            const amper = url.lastIndexOf('?');\n            const ext = url.substring(idx + 1, amper > 0 ? amper : url.length );\n\n            if (TEXTURE_EXTENSIONS.indexOf(ext) < 0) {\n                next();\n                return;\n            }\n\n            if (!resource.data) {\n                throw new Error(\"compressedImageParser middleware for PixiJS v5 must be specified in loader.use()\" +\n                    \" and must have resource.data when completed\");\n            }\n            if (resource.compressedImage) {\n                // ImageParser was added twice! ignore it.\n                next();\n                return;\n            }\n            resource.compressedImage = new CompressedImage(resource.url);\n            resource.compressedImage.loadFromArrayBuffer(resource.data, ext === 'crn');\n            resource.isCompressedImage = true;\n            resource.texture = fromResource(resource.compressedImage, resource.url, resource.name);\n            next();\n        }\n    }\n\n    function fromResource(resource: PIXI.resources.Resource, imageUrl: string, name: string) {\n        const baseTexture = new PIXI.BaseTexture(resource, {\n            scaleMode: PIXI.settings.SCALE_MODE,\n            resolution: PIXI.utils.getResolutionOfUrl(imageUrl),\n        });\n\n        const texture = new PIXI.Texture(baseTexture);\n\n        // No name, use imageUrl instead\n        if (!name)\n        {\n            name = imageUrl;\n        }\n\n        // lets also add the frame to pixi's global cache for 'fromLoader' function\n        PIXI.BaseTexture.addToCache(texture.baseTexture, name);\n        PIXI.Texture.addToCache(texture, name);\n\n        // also add references by url if they are different.\n        if (name !== imageUrl)\n        {\n            PIXI.BaseTexture.addToCache(texture.baseTexture, imageUrl);\n            PIXI.Texture.addToCache(texture, imageUrl);\n        }\n\n        return texture;\n    }\n    \n    RegisterCompressedExtensions('dds','crn','pvr','etc1','astc');\n    PIXI.Loader.registerPlugin(ImageParser);\n}\n","declare namespace PIXI {\n    interface LoaderResource {\n        _defaultUrlChoice?: string;\n        _defaultUrl?: string;\n        _baseUrl?: string;\n    }\n}\n\nnamespace pixi_compressed_textures {\n    export function extensionChooser(supportedExtensions: Array<string> = []) {\n        return function (this: PIXI.Loader, resource: PIXI.LoaderResource, next: () => any) {\n            let ext = resource.metadata.choice;\n            if (!ext) {\n                return next();\n            }\n            //let us choose extension!\n            let url = resource.url;\n            let k = 0;\n            if (!resource._defaultUrlChoice) {\n                resource._defaultUrlChoice = url;\n                k = url.lastIndexOf(\".\");\n                if (k >= 0) {\n                    resource._baseUrl = url.substring(0, k);\n                } else {\n                    return next();\n                }\n            }\n            for (let i = ext.length - 1; i >= 0; i--) {\n                url = resource._baseUrl + ext[i];\n                let isSupported = false;\n                for (let j = 0; j < supportedExtensions.length; j++) {\n                    if (ext[i] === supportedExtensions[j]) {\n                        resource.url = url;\n\n                        let pureExt = ext[i];\n                        if (pureExt.indexOf('@') > -1) {\n                            //@0.5x.dds should have pureExt \"dds\", not 5x.dds\n                            // -> remove format specifier (@2x, @0.5x) before\n                            //determining the extension\n                            pureExt = pureExt.replace(/@[0-9.]*x/, \"\");\n                        }\n                        k = pureExt.indexOf('.');\n                        if (k >= 0) {\n                            pureExt = pureExt.substring(k + 1);\n                        }\n\n                        resource.extension = pureExt;\n                        resource.loadType = (resource as any)._determineLoadType();\n                        next();\n                        return;\n                    }\n                }\n            }\n            next();\n        }\n    }\n}\n","namespace pixi_compressed_textures {\n\texport class ExtensionFixer {\n\t\tstatic use(this: PIXI.Loader, resource: PIXI.LoaderResource, next: () => any) {\n\t\t\tif (resource.texture && resource._defaultUrlChoice && resource._defaultUrl !== resource.url) {\n\t\t\t\tlet texture = resource.texture;\n\t\t\t\tlet baseTexture = texture.baseTexture;\n\n\t\t\t\tconst oldUrl = resource.url;\n\t\t\t\tconst newUrl = resource._defaultUrlChoice;\n\n\t\t\t\tlet ind = baseTexture.textureCacheIds.indexOf(oldUrl);\n\t\t\t\tif (ind >= 0) {\n\t\t\t\t\tbaseTexture.textureCacheIds[ind] = newUrl;\n\t\t\t\t\tdelete PIXI.utils.BaseTextureCache[resource.url];\n\t\t\t\t\tPIXI.utils.BaseTextureCache[newUrl] = baseTexture;\n\t\t\t\t}\n\n\t\t\t\tind = texture.textureCacheIds.indexOf(oldUrl);\n\t\t\t\tif (ind >= 0) {\n\t\t\t\t\ttexture.textureCacheIds[ind] = newUrl;\n\t\t\t\t\tdelete PIXI.utils.TextureCache[resource.url];\n\t\t\t\t\tPIXI.utils.TextureCache[newUrl] = baseTexture;\n\t\t\t\t}\n\t\t\t}\n\t\t\tnext();\n\t\t}\n\t}\n}\n","/// <reference types=\"pixi.js\" />\n\nnamespace pixi_compressed_textures {\n\t(PIXI as any).compressedTextures = pixi_compressed_textures;\n}\n\ndeclare module \"pixi-compressed-textures\" {\n\texport = pixi_compressed_textures;\n}\n","/// <reference path=\"./BASISLoader.ts\"/>\n\nnamespace pixi_compressed_textures {\n\n    export class WorkedBASISLoader extends BASISLoader {\n        private _mips: Array<IMipmap> = [];\n\n        constructor(_image: CompressedImage) {\n            super(_image);\n        }\n\n        _loadAsync(buffer: ArrayBuffer) {\n            const start = performance.now();\n            const pool: WorkedBASIS.TranscoderWorkerPool = BASISLoader.BASIS_BINDING as any;\n\n            const config = {\n                genMip: true,\n                rgbaFormat: BASISLoader.RGBA_FORMAT.basis,\n                rgbFormat: BASISLoader.RGB_FORMAT.basis,\n                transfer: true\n            };\n\n            return pool\n                .transcode(buffer, config)\n                .then( (result: ITranscodeResult ) => \n                {\n                    const width = result.width;\n                    const height = result.height;\n                    const srcBuffer = new Uint8Array(result.buffer);\n                    const target = result.hasAlpha ? BASISLoader.RGBA_FORMAT : BASISLoader.RGB_FORMAT;\n                    const name = target.name.replace(\"COMPRESSED_\", \"\");\n                    const dest = this._image;\n\n                    this._mips = result.mipmaps;\n\n                    console.log(\"[WorkedBASISLoader] Total transcoding time:\", performance.now() - start);\n                    return dest.init(dest.src, srcBuffer, 'BASIS|' + name, width, height, 1, target.native);\n                }\n            );\n        }\n\n        static loadAndRunTranscoder(options: {path: string, ext: any, threads: number}) {\n            return Promise.all([\n                fetch(options.path + \"/basis_transcoder.js\").then((r)=>r.text()),\n                fetch(options.path + \"/basis_transcoder.wasm\").then((w)=>w.arrayBuffer()),\n            ]).then( ([js, wasm]) => {\n                WorkedBASISLoader.runTranscoder(Object.assign(options, {\n                    jsSource: js, wasmSource: wasm\n                }));\n            });\n        }\n\n        static runTranscoder(options: {jsSource: string, wasmSource: ArrayBuffer, threads: number, ext: any}) {\n            const trans = new WorkedBASIS.TranscoderWorkerPool(options.threads || 2);\n            \n            super.bindTranscoder(trans as any, options.ext);\n\n            const idx = Loaders.indexOf(BASISLoader);\n            Loaders[idx] = WorkedBASISLoader;\n\n            return trans.init(options.jsSource, options.wasmSource);\n        }\n\n        levelBufferSize(width:number, height: number, mip: number) {\n            return this._mips[mip].size;\n        }\n    }\n}","interface IBasicResult {\n    type? : 'error' | 'init' | 'transcode';\n}\n\ninterface IInitResult extends IBasicResult {\n    buffer? : ArrayBuffer;\n}\n\ninterface IErrorResult extends IBasicResult{\n    type:'error';\n    error: string;\n}\n\ninterface ITranscodeOptions {\n    rgbaFormat : number;\n    rgbFormat : number;\n    genMip? : boolean;\n    transfer? : boolean;\n}\n\ninterface IMipmap {\n    width : number;\n    height: number;\n    format: number;\n    size: number;\n}\n\ninterface ITranscodeResult extends IInitResult {\n    type: 'transcode';\n    hasAlpha: boolean;\n    width: number;\n    height: number;\n    mipmaps: Array<IMipmap>;\n}\n\nnamespace pixi_compressed_textures.WorkedBASIS {\n\n    export class BasisWorker {\n        static ID = 0;\n\n        worker : Worker = undefined;\n        id: number = BasisWorker.ID ++;\n        free: boolean = false;\n        initDone: boolean = false;\n        binary: ArrayBuffer = undefined;\n\n        private _rej: (e: any) => void = undefined;\n        private _res: (e: any) => void = undefined;\n\n        init(basisSource: string = undefined, basisBinary: ArrayBuffer = undefined) {\n            if(!this.worker) {\n                this.worker = generateWorker(basisSource);\n            }\n\n            if(!this.worker) {\n                throw \"Can't create worker\";\n            }\n\n            if(this.initDone) {\n                return Promise.resolve(true);\n            }\n            \n            console.log(`[BASIS Worker ${this.id}] init start!`);\n\n            this.worker.addEventListener(\"message\", this._onMessage.bind(this));\n            this.worker.addEventListener(\"error\", this._onError.bind(this));        \n            this.binary = basisBinary;\n\n            const initStart = performance.now();\n\n            return new Promise((res, rej)=>{\n                this._rej = rej;\n                this._res = res;\n                this._init(basisBinary);\n            }).then((res : IInitResult)=>{\n                console.log(`[BASIS Worker ${this.id}] init done!`, performance.now() - initStart);\n\n                this.initDone = true;\n                this.free = true;\n                this.binary = res.buffer;\n                return true;\n            });\n        }\n\n        transcode(buffer: ArrayBuffer, options: ITranscodeOptions) {\n            if(!this.free) {\n                throw `[BASIS Worker ${this.id}] Is busy! Check '.free' status!`;\n            }\n\n            if(!buffer \n                || options.rgbaFormat === undefined \n                || options.rgbFormat === undefined) {\n                throw \"Buffer and formats requred!\";\n            }\n\n            const config = {\n                rgbaFormat : options.rgbaFormat,\n                rgbFormat : options.rgbFormat,\n                genMip : options.genMip || false\n            };\n\n            this.free = false;\n            return new Promise((res, rej) => {\n                this._rej = rej;\n                this._res = res;\n\n                if(options.transfer) {\n                    this.worker.postMessage({\n                        type : \"transcode\",\n                        buffer,\n                        config\n                    }, [buffer]);\n                } else {\n                    this.worker.postMessage({\n                        type : \"transcode\",\n                        buffer,\n                        config\n                    });\n                }\n            }).then((result: ITranscodeResult)=>{\n                this.free = true;\n                return result;\n            })\n        }\n\n        _init(bin: ArrayBuffer) {\n            this.worker.postMessage({\n                type : \"init\", id : 0, wasmBinary: bin\n            }, [bin]);\n        }\n\n        _onMessage (event: {data: IBasicResult}) {\n            if(event.data.type === \"error\") {\n                this._onError((event.data as IErrorResult).error);\n            }\n\n            if(this._res) {\n                this._res(event.data);\n            }\n        }\n\n        _onError (reason: string) {\n            if(this._rej) {\n                this._rej(reason);\n            }\n        }\n\n        destroy() {\n            this.worker.terminate();\n        }\n    }\n\n    export class TranscoderWorkerPool {\n        public workers: Array<BasisWorker> = [];\n        private count: number = 1; \n        \n        constructor(count:number = 0){\n            this.count = count || 1;\n        }\n\n        init(jsSource: string, wasmSource: ArrayBuffer) {\n            let  count = 0;\n            const next = () => {\n                if( ++count > this.count) {\n                    return;\n                }\n                const w = new BasisWorker();\n                this.workers.push(w);\n                return w.init(jsSource, wasmSource).then(()=>{\n                    wasmSource = w.binary;\n                    next();\n                 });\n            };\n\n            return next().then(()=>{\n                return this;\n            })\n        }\n\n        transcode(buffer: ArrayBuffer, options: ITranscodeOptions) {\n            if(!this.workers || !this.workers.length) {\n                throw \"[TranscoderWorkerPool] Pool empty, populate before!\";\n            }\n            const workers = this.workers;\n\n            let freeWorker: BasisWorker = undefined;\n            let iteration = 0;\n\n            const search = (doneCallback : (w: BasisWorker) => void) => {\n                for(let w of workers) {\n                    if(w.free) {\n                        freeWorker = w;\n                        break;\n                    }\n                }\n\n                if(iteration > 100) {\n                    throw \"[TranscoderWorkerPool] Can't found free worker after 100 interation!\";\n                }\n    \n                if(!freeWorker) {\n                    setTimeout( () => search(doneCallback), 10 * iteration);\n                } else {\n                    doneCallback(freeWorker);\n                }\n\n                iteration ++;\n            }\n    \n            return new Promise(search).then( (worker) =>{    \n                console.log(`[TranscoderWorkerPool] run transcoding on ${worker.id} worker`);\n                return worker.transcode(buffer, options);\n            });\n        }\n        \n        destroy() {\n            this.workers.forEach((w)=>{\n                w.destroy();\n            })\n            this.workers = undefined;\n        }\n    }\n}\n","// @ts-nocheck \ndeclare var BASIS: any;\n\nnamespace pixi_compressed_textures.WorkedBASIS {\n\texport const basisWorkerSource = function () {\n\t\tlet _BasisFile : any;\n\t\tfunction init (message : any) {\n\t\t\tconst bin = message.wasmBinary as ArrayBuffer;\n\t\t\t__init (bin).then(()=>{\n\t\t\t\t//@ts-ignore\n\t\t\t\tself.postMessage({ type : \"init\", status : true, buffer : bin }, [bin]); // return back for next workers\n\t\t\t});\n\t\t}\n\n\t\tfunction transcode(message : any) {\n\t\t\ttry {\n\t\t\t\tconst res = __transcode( message.buffer, message.config);\n\n\t\t\t\tObject.assign(res, {\n\t\t\t\t\ttype : 'transcode',\n\t\t\t\t});\n\t\t\t\t//@ts-ignore\n\t\t\t\tself.postMessage( res, [res.buffer.buffer] );\n\n\t\t\t} catch ( error ) {\n\t\t\t\tconsole.error( error );\n\t\t\t\t//@ts-ignore\n\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message });\n\t\t\t}\n\t\t}\n\n\t\tonmessage = function ( e ) {\n\t\t\tconst message = e.data;\n\t\t\tconst func = self[message.type];\n\t\t\tif(func) {\n\t\t\t\t//@ts-ignore\n\t\t\t\tfunc(message);\n\t\t\t}\n\t\t};\n\n\t\tfunction __init( wasmBinary: ArrayBuffer ) {\n\n\t\t\tlet Module: any;\n\t\t\treturn new Promise( ( resolve ) => \n\t\t\t{\n\t\t\t\tModule = { wasmBinary, onRuntimeInitialized: resolve };\n\t\t\t\treturn BASIS(Module);\n\n\t\t\t}).then( () => {\n\t\t\t\tconst { BasisFile, initializeBasis } = Module;\n\n\t\t\t\t_BasisFile = BasisFile;\n\t\t\t\tinitializeBasis();\n\t\t\t});\n\t\t}\n\n\t\tfunction __transcode( buffer : ArrayBuffer, config: any ) {\n\t\t\tconst basisFile = new _BasisFile( new Uint8Array( buffer ) );\n\t\t\tconst width = basisFile.getImageWidth( 0, 0 );\n\t\t\tconst height = basisFile.getImageHeight( 0, 0 );\n\t\t\tconst levels = config.genMip ? basisFile.getNumLevels( 0 ) : 1;\n\t\t\tconst hasAlpha = basisFile.getHasAlpha();\n\n\t\t\tconst cleanup = () => {\n\t\t\t\tbasisFile.close();\n\t\t\t\tbasisFile.delete();\n\t\t\t};\n\n\t\t\tif (!width || !height || !levels ) {\n\t\t\t\tcleanup();\n\t\t\t\tthrow 'Invalid .basis file';\n\t\t\t}\n\n\t\t\tif ( ! basisFile.startTranscoding() ) {\n\t\t\t\tcleanup();\n\t\t\t\tthrow '.startTranscoding failed';\n\t\t\t}\n\n\t\t\tlet totalSize = 0;\n\t\t\tlet offset = 0;\n\t\t\tlet targetBuffer = undefined;\n\t\t\t\n\t\t\tconst mipmaps = [];\n\t\t\tconst target = hasAlpha ? config.rgbaFormat : config.rgbFormat;\n\n\t\t\tfor ( let mip = 0; mip < levels; mip ++ ) {\n\t\t\t\tconst mipWidth = basisFile.getImageWidth( 0, mip );\n\t\t\t\tconst mipHeight = basisFile.getImageHeight( 0, mip );\n\t\t\t\tconst size = basisFile.getImageTranscodedSizeInBytes( 0, mip, target );\n\t\t\t\t\n\t\t\t\t//calc total size of buffer for all mips\n\t\t\t\ttotalSize += size;\n\t\t\t\tmipmaps.push( { width: mipWidth, height: mipHeight, format: target, size } );\n\t\t\t}\n\n\t\t\ttargetBuffer = new Uint8Array(totalSize);\n\t\t\tfor ( let mip = 0; mip < levels; mip ++ ) {\n\t\t\t\tconst size = mipmaps[mip].size;\n\t\t\t\tconst dst = new Uint8Array(targetBuffer.buffer, offset, size);\n\t\t\t\tconst status = basisFile.transcodeImage(\n\t\t\t\t\tdst,\n\t\t\t\t\t0,\n\t\t\t\t\tmip,\n\t\t\t\t\ttarget,\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t);\n\n\t\t\t\tif (!status) {\n\t\t\t\t\tcleanup();\n\t\t\t\t\tthrow '.transcodeImage failed.';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\toffset += size;\n\t\t\t\t//mipmaps[mip].data = dst;\n\t\t\t}\n\n\t\t\tcleanup();\n\t\t\treturn { width, height, hasAlpha, mipmaps, buffer : targetBuffer};\n\t\t}\n\t}\n\n\texport function generateWorker(basisJSSource: string): Worker {\n\t\tlet source = basisWorkerSource.toString();\n\t\tconst b0 = source.indexOf(\"{\");\n\t\tconst b1 = source.lastIndexOf(\"}\");\n\t \n\t\tsource = basisJSSource + \"\\n\" + source.substring(b0 + 1, b1);\n\t\treturn new Worker(URL.createObjectURL(new Blob([source])));\n\t} \n}"]}